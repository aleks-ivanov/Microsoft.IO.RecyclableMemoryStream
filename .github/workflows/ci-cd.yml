name: CI/CD Pipeline

on:
  push:
  workflow_dispatch:

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.tag_generator.outputs.new_version }}
    steps:
      - name: Data gatherer
        id: data_gatherer
        shell: pwsh
        run: |
          # Get default branch
          $repo = "${{ github.repository }}"
          $defaultBranch = Invoke-RestMethod -Method GET -Uri https://api.github.com/repos/$repo | Select-Object -ExpandProperty default_branch

          Write-Output "::set-output name=default_branch::$(echo $defaultBranch)"

      - name: Conditionals handler
        id: conditionals_handler
        shell: pwsh
        run: |
          $defaultBranch = "${{ steps.data_gatherer.outputs.default_branch }}"
          $githubRef = "${{ github.ref }}"
          $currentBranch = $githubRef -replace 'refs/heads/', ''
          $githubEventName = "${{ github.event_name }}"
          $isDefaultBranch = 'false'
          $isPush = 'false'
          $isPushToDefaultBranch = 'false'

          if ( $currentBranch -eq $defaultBranch ) {
            $isDefaultBranch = 'true'
          }
          if ( $githubEventName -eq 'push' ) {
            $isPush = 'true'
          }
          if ( $currentBranch -eq $defaultBranch -and $githubEventName -eq 'push' ) {
            $isPushToDefaultBranch = 'true'
          }

          Write-Output "::set-output name=is_default_branch::$(echo $isDefaultBranch)"
          Write-Output "::set-output name=is_push::$(echo $isPush)"
          Write-Output "::set-output name=is_push_to_default_branch::$(echo $isPushToDefaultBranch)"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.203

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Version determiner
        id: version_determiner
        shell: pwsh
        run: |
          $gitNewVersion = if ( "${{ steps.tag_generator.outputs.new_version }}" ) { "${{ steps.tag_generator.outputs.new_version }}" } else { $null }

          # fetch all tags from remote
          git fetch --all --tags

          $gitTagsList = git tag
          $projectCurrentVersion = ( $gitTagsList | Where-Object { $_ -notmatch 'v' } | Sort-Object { [Version] $_ } -Descending )[0] -replace ' ', ''
          $projectNewVersion = $gitNewVersion ?? $projectCurrentVersion

          Write-Output "::set-output name=project_version::$(echo $projectNewVersion)"

      - name: Restore solution
        shell: pwsh
        run: |
          dotnet restore Microsoft.IO.RecyclableMemoryStream.sln

      - name: Pack solution
        shell: pwsh
        run: |
          $projectVersion = "${{ steps.version_determiner.outputs.project_version }}"

          dotnet pack Microsoft.IO.RecyclableMemoryStream.sln `
          --configuration Release `
          --output NuGet `
          -property:Version=$projectVersion `
          --no-restore

      - name: Upload NuGet packages as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: NuGet packages
          path: NuGet/
