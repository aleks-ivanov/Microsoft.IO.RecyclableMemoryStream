name: CI/CD Pipeline

trigger:
- master
pr:
- master

variables:
  projectName: 'Microsoft.IO.RecyclableMemoryStream'
  solution: 'Microsoft.IO.RecyclableMemoryStream.sln'

# Stage CI
## Jobs
### Job: build, test and artifact generation
  #### pwsh: Data gatherer
#### pwsh: Conditionals handler
#### pwsh: Tag generator
#### pwsh: Project version determiner
  #### task: restore
  #### task: build Debug
  #### task: copy bin to b/ and a/
  #### task: test
  #### task: pack Release
#### task: upload artifacts

# Stage CD
## Jobs
### Job: Package Deployment
### Job: GitHub Release

stages:
  - stage: ci
    displayName: Continuous Integration
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: build_test_artifact_generation
        displayName: Build, test and artifact generation
        steps:
          # Tooling setup

          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK'
            inputs:
              packageType: sdk
              version: 5.0.203
              installationPath: $(Agent.ToolsDirectory)/dotnet

          # Information setup

          - pwsh: |
              # Get default branch
              $repo = "$(Build.Repository.Name)"
              $defaultBranch = Invoke-RestMethod -Method GET -Uri https://api.github.com/repos/$repo | Select-Object -ExpandProperty default_branch

              Write-Host "##vso[task.setvariable variable=DefaultBranch;isOutput=true]$defaultBranch"
            displayName: Data gatherer
            name: DataGatherer

          - pwsh: |
              # $gitNewVersion = if ( "" ) { "" } else { $null }
              $gitNewVersion = $null
              $gitTagsList = git tag
              $projectCurrentVersion = ( $gitTagsList | Where-Object { $_ -notmatch 'v' } | Sort-Object { [Version] $_ } -Descending )[0] -replace ' ', ''
              $projectNewVersion = $gitNewVersion ?? $projectCurrentVersion

              Write-Host "##vso[task.setvariable variable=ProjectVersion;isOutput=true]$projectNewVersion"
            displayName: Version determiner
            name: VersionDeterminer

          - pwsh: |
              Write-Host $(DataGatherer.DefaultBranch)
              Write-Host $(VersionDeterminer.ProjectVersion)
            displayName: Check data

          # Build validation and testing

          - task: DotNetCoreCLI@2
            displayName: 'Restore solution'
            inputs:
              command: 'restore'
              projects: '$(solution)'

          - pwsh: |
              dotnet build $(solution) `
              --configuration Debug `
              -property:VersionPrefix=$(VersionDeterminer.ProjectVersion) `
              -property:VersionSuffix=$(Build.BuildId) `
              -property:TF_BUILD=true `
              --no-restore
            displayName: 'Build solution'

          # - task: DotNetCoreCLI@2
          #   displayName: 'Build solution'
          #   inputs:
          #     command: 'build'
          #     projects: '$(solution)'
          #     arguments: '--configuration Debug -property:VersionPrefix=$(VersionDeterminer.ProjectVersion) -property:VersionSuffix=$(Build.BuildId) -property:GITHUB_ACTIONS=true -property:SignedBuild=true --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Run unit tests'
            inputs:
              command: 'test'
              projects: '$(solution)'
              arguments: '--configuration Debug --logger trx;LogFilePath=$(Common.TestResultsDirectory)/$(projectName).trx;verbosity=normal --results-directory "$(Common.TestResultsDirectory)/" --no-build'
              publishTestResults: false

          - pwsh: |
              Copy-Item -Path src/bin/Debug -Recurse -Destination "$(Build.BinariesDirectory)/Assemblies/"
              Copy-Item -Path src/bin/Debug -Recurse -Destination "$(Build.ArtifactStagingDirectory)/Assemblies/"
              Copy-Item -Path $(Common.TestResultsDirectory) -Recurse -Destination "$(Build.ArtifactStagingDirectory)/Test results/"
            displayName: Move build and test artifacts to binaries and staging dirs

          # Package generation

          - task: DotNetCoreCLI@2
            displayName: 'Pack solution'
            inputs:
              command: 'pack'
              projects: '$(solution)'
              arguments: '--configuration Release --output "$(Build.ArtifactStagingDirectory)/NuGet packages/" -property:VersionPrefix=$(VersionDeterminer.ProjectVersion) -property:VersionSuffix=$(Build.BuildId) -property:GITHUB_ACTIONS=true -property:SignedBuild=true --no-restore'

          # Artifact upload

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'Pipeline artifacts'
              publishLocation: 'pipeline'

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)