name: CI/CD Pipeline

trigger:
- master
pr:
- master

variables:
  projectName: 'Microsoft.IO.RecyclableMemoryStream'
  solution: 'Microsoft.IO.RecyclableMemoryStream.sln'

# Stage CI
## Jobs
### Job: build, test and artifact generation
#### pwsh: Data gatherer
#### pwsh: Conditionals handler
#### pwsh: Tag generator
#### pwsh: Project version determiner
#### task: restore
#### task: build Debug
#### task: copy bin to b/ and a/
#### task: upload assemblies
#### task: test
#### task: upload test results
#### task: pack Release
#### task: upload package

# Stage CD
## Jobs
### Job: Package Deployment
### Job: GitHub Release

stages:
  - stage: ci
    displayName: Continuous Integration
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: build_test_artifact_generation
        displayName: Build, test and artifact generation
        steps:
          # Tooling setup

          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK'
            inputs:
              packageType: sdk
              version: 5.0.203
              installationPath: $(Agent.ToolsDirectory)/dotnet

          # Information setup

          - pwsh: |
              # Get default branch
              $repo = "$(Build.Repository.Name)"
              $defaultBranch = Invoke-RestMethod -Method GET -Uri https://api.github.com/repos/$repo | Select-Object -ExpandProperty default_branch

              Write-Host $defaultBranch

              Write-Host '##vso[task.setvariable variable=default_branch;isOutput=true]$defaultBranch'
            displayName: Data gatherer
            name: data_gatherer

          - pwsh: |
              Write-Host $(data_gatherer.default_branch)

          # Build validation and testing

          - task: DotNetCoreCLI@2
            displayName: 'Run restore'
            inputs:
              command: 'restore'
              projects: '$(solution)'

          - task: DotNetCoreCLI@2
            displayName: 'Run build'
            inputs:
              command: 'build'
              projects: '$(solution)'
              arguments: '--configuration Debug --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Run unit tests'
            inputs:
              command: 'test'
              projects: '$(solution)'
              arguments: '--configuration Debug --logger trx;LogFileName=$(projectName).trx;verbosity=normal --results-directory "Test results/" --no-build'
              publishTestResults: false

          # Package generation

          # Artifact upload